
class MainForm:public Form
{
    TextBox* txtFilePath;
    TextBox* txtFileNumber;
    ProgressBar *progressBar; //具体通知控件
public:
    void Button1_Click(){
        string filePath = txtFilePath->getText();
        int number = atoi(txtFileNumber->getText().c_str());
        ISplitter *splitter = new BinarySplitter(filePath,number,progressBar); //抽象依赖具体方法，通过对象创建模式避开new
        splitter.split();                                                      //避免创建对象过程中导致的紧耦合
    }
};

//针对不同数据进行处理
class ISplitter{
public:
    virtual void split()=0;
    virtual ~ISplitter(){}
};
class BinarySplitter:public ISplitter
{
};
class TxtSplitter:public ISplitter{
};
class PictureSplitter:public ISplitter{
};


//工厂模式
class MainForm:public Form
{
    SplitterFactory* factory;
public:
    MainForm(SplitterFactory* factory){
        this->factory = factory;
    }
    void Button1_Click(){

        ISplitter *splitter = factory->CreateSplitter(); // 这里不需要修改 根据form传进来什么对象就调用对应方法
        splitter.split();
    }
};

class ISplitter{
public:
    virtual void split()=0;
    virtual ~ISplitter(){}
};
class SplitterFactory{
    virtual ISplitter* CreateSplitter()=0;  //定义一个创建对象的接口，让子类决定创建哪一类对象，使得一个类实例化延迟
    virtual ~SplitterFactory(){};               //缺点是所有创建对象的方法要求参数相同 BinarySplitter()都是无参数
};                                                // 需要调用这个CreateSlitter方法创建对象，他没有参数，所以重写的方法
class BinarySplitter:public ISplitter{              //   也没有参数，所有创建对象的方法使用它传递的参数，所以要求参数相同
};
class TxtSplitter:public ISplitter{
};
class PictureSplitter:public ISplitter{
};
class BinaryFactory:public SplitterFactory{
public:
    ISplitter* CreateSplitter(){
        return new BinarySplitter();
    }
};
class TxtFactory:public SplitterFactory{
public:
    ISplitter* CreateSplitter(){
        return new TxtSplitter();
    }
};
class PictureFactory:public SplitterFactory{
public:
    ISplitter* CreateSplitter(){
        return new PictureSplitter();
    }
};

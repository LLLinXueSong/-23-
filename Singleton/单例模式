有一些特殊类保证运行中只存在一个实例
class Singleton{
private:
    Singleton(){}
    Singleton(const Singleton& other);
public:
    static Singleton* getInstance();
    static Singleton* m_instance;
};
Singleton* Singleton::m_instance=nullptr;
线程非安全版
Singleton* Singleton::getInstance(){
    if(m_instance==nullptr){
        m_instance = new Singleton();
    }
    return m_instance;
}

线程安全版本，但锁代价过高
Singleton* Singleton::getInstance(){
    Lock lock;          对下面所有行加锁
    if(m_instance == nullptr){
        m_instance = new Singleton();
    }
    return m_instance;
}

双检查锁，内存读写reorder不安全
Singleton* Singleton::getInstance(){
    if(m_instance == nullptr){
        Lock lock;          对下面所有行加锁
        if(m_instance == nullptr){
            m_instance = new Singleton();
        }
    }
    return m_instance;
}

c++11版本后跨平台的实现（volatile）
std::atomic<Singleton*> Singleton::m_instance;
std::mutex Singleton::m_mutex;
Singleton* Singleton::getInstance(){
    Singleton* tmp = m_instance.load(std::memory_order_relaxed);
    std::atomic_thread_fence(std::memory_order_acquire);  获取内存fence
    if(tmp == nullptr){
        std::lock_guard<std::mutex> lock(m_mutex);
        tmp = m_instance.load(std::memory_order_relaxed);   修改取变量方式
        if(tmp == nullptr){
            tmp = new Singleton();
            std::atomic_thread_fence(std::memory_order_release);  释放内存fence
            m_instance.store(tmp,std::memory_order_relaxed);
        }
    }
    return tmp;
}

static   局部静态变量
class Singleton  
{  
 public:  
    static Singleton& GetInstance()  
    {  
        static Singleton instance_;                   
        return instance_;  
    }  
  
    ~Singleton()  
    {  
        cout << "~Singleton"<<endl;  
    }  
private:  
  
    Singleton()  
    {  
        cout << "Singleton "<<endl;  
    }  
    Singleton(const Singleton &other);  
    Singleton & operator=(const Singleton &other);  
};  

23种设计模式

八大原则
1.依赖倒置（DIP）
  高层模块不应该历来与底层模块，二者都依赖于抽象
  抽象不应该依赖于实现细节，实现细节依赖于抽象
2.开放封闭（OCP）
  对扩展开放，对修改封闭
  类模块是可以扩展的，但是不可以修改
3.单一职责（SRP） 
  一个类应该仅有一个引起它变化的原因。
  变化的方向隐含着类的职责
4.Liskov替换原则（LSP）
  子类必须能替换他们的基类
  继承表达抽象类型
5.接口隔离
  不应该强迫客户程序依赖他们不用的方法
  接口应该小而完备
6.对象组合优于类继承
  类继承通常为白箱复用，对象组合为黑箱复用
  类继承自某种程度破坏了封装性，子类父类耦合度高
  对象组合则只要求被组合对象具有良好定义的接口，耦合度低
7.封装变化点
  使用封装来创建对象之间的分界层，让设计者可以在一侧进行修改，而不会对另一侧产生不良的影响
8.面向接口编程
  不将变量类型声明为某个特定的具体类，而是声明为某个接口
  客户程序无需或者对象的具体类型，只需要知道对象所具有的接口
  减少系统中各部分的依赖关系
重构技法 
静态-》动态
早绑定-》晚绑定
继承-》组合
编译时依赖-》运行时依赖
紧耦合-》松耦合

从封装变化的角度对模式分类
组件协作：模板模式 策略模式 观察者模式
单一职责：装饰器 桥模式
对象创建：工厂模式 抽象工厂 原型模式 构建器
对象性能：单例模式 享元模式
接口隔离：门面模式 代理模式 中介者模式 适配器
状态变化：备忘录 状态模式
数据结构：组合模式 迭代器 责任链
行为变化：命令模式 访问器
领域问题：解释器

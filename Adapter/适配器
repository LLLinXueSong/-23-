Adapter
由于应用环境的变化，常常需要将一些现存的对象方法哦新的环境中，但是新环境的接口是这些现存对象不能满足的
class ITarget{  新接口
public:
    virtual void process()=0;

};
老接口
class IAdaptee{
public:
    virtual void foo(int data)=0;
    virtual int bar()=0;
};
遗留类
class Oldclass:public IAdaptee{

};

对象适配器
class Adapter:public ITarget{
protected:
    IAdaptee* pAdaptee;
public:
    Adapter(IAdaptee* pAdaptee){
        this->pAdaptee=pAdaptee;
    }
    virtual void process(){
        int data = pAdaptee->bar();
        pAdaptee->foo(data);
    }
};
int main(){
    IAdaptee* pAdaptee = new Oldclass();
    ITarget* pTarget = new Adapter(pAdaptee);
    pTarget->process();
}


类适配器           用旧方法里实现新方法 不灵活
class Adapter:public ITarget,protected IAdaptee{

};

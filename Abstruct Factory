
class EmployeeDAO{
public://new 绑定了信息，不适用改成其他数据库,使用工厂模式时，建立三个工厂创建三个对象，但是三个对象之间有内部联系
    vector<EmployeeDAO> GetEmployees(){//传入SQLconnect OricleCammand会报错，所以将三个有关系的对象抽象为一个类
        SqlConnection*  connection = new SqlConnection();
        connection->ConnectionString("...");
        SqlCommand* command = new SqlCommand();
        command->CommandText("...");
        SqlDataReader* reader = command->ExecuteReader();
        whie(reader->Read()){

        }
    }
};



class IDBConnection{

};
class IDBCommand{

};
class IDataReader{

};
class IDBFactory{
public:
    virtual IDBConnection* CreateDBConnection()=0;  //缺点：这里不能改，不能增加新类型对象
    virtual IDBCommand* CreateDBCommand()=0;
    virtual IDataReader* CreateDataReader()=0;
};
//支持SQL
class SqlConnection:public IDBConnection{

};
class SqlIDBCommand:public IDBCommand{

};
class SqlIDataReader:public IDataReader{

};
//支持Oricle
class OriConnection:public IDBConnection{

};
class OriIDBCommand:public IDBCommand{

};
class OriIDataReader:public IDataReader{

};
class OriDBFactory:public IDBFactory{
    IDBConnection* CreateDBConnection(){}; //相互依赖的对象创建工作，抽象为一个接口，该接口负责创建一系列对象
    IDBCommand* CreateDBCommand(){};
    IDataReader* CreateDataReader(){};
};
class SqlDBFactory:public IDBFactory{
    IDBConnection* CreateDBConnection(){};
    IDBCommand* CreateDBCommand(){};
    IDataReader* CreateDataReader(){};
};
class EmployeeDAO{
    IDBFactory* dbFactory;
public://new 绑定了信息，不适用改成其他数据库
    vector<EmployeeDAO> GetEmployees(){
        IDBConnection*  connection = dbFactory->CreateDBConnection();
        connection->ConnectionString("...");
        SqlCommand* command = dbFactory->CreateDBCommand()
        command->CommandText("...");
        SqlDataReader* reader = command->ExecuteReader();
        whie(reader->Read()){

        }
    }
};

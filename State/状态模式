
某些对象的状态如果改变，其行为也会随之发生噶边，比如文档处于只读状态，其支持的行为和读写状态支持的模式完全不同
enum NetworkState
{
    Network_open,
    Network_Close,      如果添加新状态，后边操作都需要改
    Network_Connect,
};
class NetworkProcessor{
    NetworkState state;
public:
    void Operation1(){
        if(state == Network_open){
            state = Network_close;
        }else if(state == Network_Close){
            state = Network_Connect;
        }else if(state == Network_Connect){
            state = Network_open;
        }
    }
    void Operation2(){
        if(state == Network_open){
            state = Network_Connect;
        }else if(state == Network_Close){
            state = Network_Opem;
        }else if(state == Network_Connect){
            state = Network_Close;
        }
    }
};





class NetWorkState{
public:
    NetWorkState* pNext;
    virtual void Operation1()=0;
    virtual void Operation2()=0;
    virtual void Operation3()=0;
    virtual ~NetworkState(){}
};

class OpenState:public NetworkState{                新加状态只要继承重写一个类
    static NetworkState *m_instance;
public:
    static NetworkState* getInstance(){
        if(m_instance==nullptr){
            m_instance = new OpenState();
        }
        return m_instance;
    }
    void Operation1(){
        pNext = CloseState::getInstance();
    }
    void Operation2(){
        pNext = ConnectState::getInstance();
    }
    void Operation3(){
        pNext = OpenState::getInstance();
    }
};
class CloseState:public NetWorkState{

};
class NetworkProcessor{
    NetworkState *State;
public:
    NetworkProcessor(NetWorkState *pState){
        this->pState = pState;
    }
    void Operation1(){
        pState->Operation1();
        pState = pState->pNext;
    }
    void Operation2(){

    }
    void Operation3(){

    }
};

